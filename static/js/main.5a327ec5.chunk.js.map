{"version":3,"sources":["components/Cell.js","components/Grid.js","components/AgeCounter.js","components/ControlPanel.js","App.js","serviceWorker.js","index.js"],"names":["Cell","styled","_ref","className","alive","react_default","a","createElement","_templateObject","props","size","Grid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","area","React","createRef","state","elSize","setState","ReactDOM","findDOMNode","current","getBoundingClientRect","width","calculateElSize","prevProps","_this2","GridWrap","innerRef","grid","map","row","i","cell","j","components_Cell","key","concat","Component","div","Grid_templateObject","AgeCounter","count","Counter","AgeCounter_templateObject","ControlPanel","age","generate","run","stop","changeSize","Panel","Button","onClick","Input","type","onChange","value","min","max","components_AgeCounter","ControlPanel_templateObject","button","_templateObject2","input","_templateObject3","App","DEFAULTS","getEmptyGrid","time","Array","fill","gen","arguments","length","undefined","getNeighbourCount","fn","getNextGen","getCellBasedOnRules","handleStop","Math","round","random","setInterval","calculate","bind","speed","clearInterval","event","target","Content","H1","Main","Field","components_Grid","components_ControlPanel","handleRun","handleGenerate","handleChangeSize","App_templateObject","App_templateObject2","App_templateObject3","h1","_templateObject4","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a327ec5.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CellComponent = ({className, alive}) => (\n  <div className={className}></div>\n);\n\nconst Cell = styled(CellComponent)`\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  background: ${props => props.alive ? '#666': 'white'};\n  border: 1px solid #808080;\n  /* background: ${props => props.alive ? '#fff': '#808080'};\n  border: 1px solid #666; */\n`\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Cell from './Cell';\nimport styled from 'styled-components';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.area = React.createRef();\n\n    this.state = {\n      elSize: 0\n    };\n  }\n\n  calculateElSize () {\n    this.setState({\n      elSize: ReactDOM.findDOMNode(this.area.current).getBoundingClientRect().width / this.props.size\n    });\n  }\n\n  componentDidMount() {\n    this.calculateElSize();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.size !== prevProps.size) {\n      this.calculateElSize();\n    }\n  }\n\n  render() {\n    return (\n      <GridWrap innerRef={this.area}>\n        {this.props.grid.map((row, i) => {\n          return row.map((cell, j) => {\n            return <Cell key={`${i}${j}`} alive={cell} size={this.state.elSize} />\n          })\n        })}\n      </GridWrap>\n    );\n  }\n}\n\nexport default Grid;\n\n\nconst GridWrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n`\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst AgeCounter = ({className, count}) => (\n  <Counter className={className}>Age {count}</Counter>\n)\n\nexport default AgeCounter;\n\n\nconst Counter = styled.div`\n  margin: 20px 0;\n  text-align: center;\n`\n","import React from 'react';\nimport styled from 'styled-components';\nimport AgeCounter from './AgeCounter';\n\nconst ControlPanel = ({ age, size, generate, run, stop, changeSize }) => (\n  <Panel>\n    <Button onClick={generate}>generate</Button>\n    <Button onClick={run}>run</Button>\n    <Button onClick={stop}>stop</Button>\n    <div>\n      <label>Size {size}</label>\n      <Input type=\"range\" onChange={changeSize} value={size} min=\"1\" max=\"100\" />\n    </div>\n    <AgeCounter count={age}/>\n  </Panel>\n)\n\nexport default ControlPanel;\n\n\nconst Panel = styled.div`\n  /* background: #ccc; */\n`\n\nconst Button = styled.button`\n  width: 100%;\n  margin-bottom: 30px;\n`\n\nconst Input = styled.input`\n  width: 100%;\n  margin-bottom: 30px;\n`\n","import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport Grid from './components/Grid';\nimport ControlPanel from './components/ControlPanel';\nimport DEFAULTS from './defaults';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      age: 0,\n      size: DEFAULTS.size,\n      grid: this.getEmptyGrid(DEFAULTS.size)\n    };\n\n    this.time = null;\n  }\n\n  getEmptyGrid(size) {\n    return Array(size).fill(0).map(()=>{\n      return Array(size).fill(0);\n    });\n  }\n\n  getCellBasedOnRules(gen, i, j) {\n    function getNeighbourCount(count = 0) {\n      if (i !== 0) {\n        count += gen[i - 1][j - 1] === 1 ? 1: 0;\n        count += gen[i - 1][j] === 1 ? 1: 0;\n        count += gen[i - 1][j + 1] === 1 ? 1: 0;\n      }\n      if (i !== gen.length - 1) {\n        count += gen[i + 1][j - 1] === 1 ? 1: 0;\n        count += gen[i + 1][j] === 1 ? 1: 0;\n        count += gen[i + 1][j + 1] === 1 ? 1: 0;\n      }\n      count += gen[i][j - 1] === 1 ? 1: 0;\n      count += gen[i][j + 1] === 1 ? 1: 0;\n      return count;\n    }\n\n    let count = getNeighbourCount();\n    if (gen[i][j] === 0){\n      return count === 3 ? 1 : 0;\n    }\n\n    return count === 2 || count === 3 ? 1 : 0;\n  }\n\n  getNextGen(gen, fn) {\n    return gen.map((row, i) => {\n      return row.map((cell, j) => {\n        return fn(gen, i, j);\n      })\n    });\n  }\n\n  calculate() {\n    this.setState(function(state){\n      return {\n        age: state.age + 1,\n        grid: this.getNextGen(state.grid, this.getCellBasedOnRules)\n      }\n    });\n  }\n\n  generate() {\n    this.handleStop();\n    this.setState(function(state){\n      return {\n        age: 0,\n        grid: this.getNextGen(state.grid, () => (Math.round(Math.random())))\n      }\n    });\n  }\n\n  handleRun() {\n    this.handleStop();\n    this.time = setInterval(this.calculate.bind(this), DEFAULTS.speed);\n  }\n\n  handleStop() {\n    clearInterval(this.time);\n  }\n\n  handleChangeSize(event) {\n    this.handleStop();\n    this.setState({\n      size: +event.target.value,\n      grid: this.getEmptyGrid(+event.target.value)\n    });\n  }\n\n  handleGenerate() {\n    this.handleStop();\n    this.generate();\n  }\n\n  render() {\n    return (\n      <Content>\n        <header>\n          <H1>The Game of Life</H1>\n        </header>\n        <Main>\n          <Field>\n            <Grid grid={this.state.grid} size={this.state.size} />\n          </Field>\n          <ControlPanel\n            age={this.state.age}\n            size={this.state.size}\n            run={this.handleRun.bind(this)}\n            stop={this.handleStop.bind(this)}\n            generate={this.handleGenerate.bind(this)}\n            changeSize={this.handleChangeSize.bind(this)}\n          />\n        </Main>\n      </Content>\n    );\n  }\n}\n\nconst Content = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nconst Main = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n`\n\nconst Field = styled.div`\n  width: 500px;\n`\n\nconst H1 = styled.h1`\n  margin: 0;\n  padding: 1em;\n`\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}